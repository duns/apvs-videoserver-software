#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: WPSS videoserver service script
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Christos Papachristou <tsoupap@gmail.com>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
umask 0000
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="videoserver service (single instance)"
DAEMON=/home/duns/git/apvs-videoserver-software/videosink/scripts/videoserver.sh
#DAEMON_ARGS="--options args"
CONFFILE=/etc/videostream.conf.d/videoserver.conf
PTU_ID=${2}
SESSION_ID="t0${PTU_MAC}"
[ -n "$3" ] && SESSION_ID=${3}

# Read configuration variable file if it is present
if [ -r "$CONFFILE" ] ;then
	PTU_HOSTNAME=`grep "$PTU_ID " "$CONFFILE" | awk '{print $1}' | head -1` 
	PTU_MAC=`grep "$PTU_ID" "$CONFFILE" | awk '{print $2}' | head -1` 
	SLOT=`grep "$PTU_ID" "$CONFFILE" | awk '{print $3}' | head -1` 
#	echo $DAEMON_ARGS
	if [ -z "$PTU_MAC" ];then
		log_daemon_msg "PTU ID $PTU_MAC not found in configuration file $CONFFILE" && log_end_msg 1 
		exit 1
	fi
	
fi

NAME=videoserver-${PTU_HOSTNAME}
LOGFILENAME="/var/log/videoserver/"`date +"%y%m%d"`.${PTU_HOSTNAME}.log
DAEMON_ARGS="$PTU_MAC $SLOT $SESSION_ID $LOGFILENAME"
PIDFILE=/var/run/videoserver/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USERID=$USER:$USER
USERID=atwpss:atwpss
USERID=wpsssupervisor:wpsssupervisor

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE=yes

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
#	echo ID=${1}
#	return 0
#TODO TEST IF RUNNING
	[ -f "$PIDFILE"  ] && status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME"  && return 1
	#[ -f "$PIDFILE"  ] && [ -n "`ps --no-heading -p $(cat $PIDFILE)`" ] && return 1
#	[ -f "$PIDFILE"  ] && return 2
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	[ ! -d `dirname $PIDFILE` ] && mkdir -p `dirname $PIDFILE` && chmod 777 `dirname $PIDFILE`
log_daemon_msg  start-stop-daemon --background --start --quiet --make-pidfile --chuid $USERID --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS
	start-stop-daemon --background --start --quiet --make-pidfile --chuid $USERID --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --background --start --quiet --make-pidfile --chuid $USERID --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS\
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	[ -f "$PIDFILE"  ] || return 1
##	PGID=`ps --no-heading -p $(cat $PIDFILE) -o "%r"| awk '{print $1}'`
##	echo $PGID
##	[ -z "$PGID"  ] && return 1
##	kill -INT -${PGID}
#	sleep 5
#	kill -KILL -${PGID}
##	RETVAL=0
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE 
	RETVAL="$?"
#	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
#	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
#	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start "$2"
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop "$2"
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME"  && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	sleep 5
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
